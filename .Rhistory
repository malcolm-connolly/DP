shiny::runApp('DP')
runApp('DP')
setwd("//lancs/homes/57/connol19/My Documents/GitHub/DP")
runApp('DP')
readRDS("./www/v.RData")
load("./www/v.RData")
runApp('DP')
here::here("./www/v.RData")
runApp('DP')
runApp()
runApp()
runApp()
v <- readRDS("./www/v.RData")
runApp()
runApp()
plot(x=seq(1,100),y=p2[1:100,1],lwd=2,col="red",type = "lines")
runApp()
runApp()
runApp()
runApp()
P <- readRDS("./www/P.RData")
arrival <- function(u){
if( u < 0.55 ){
return(c(1,0,0,0))
} else if( u < 0.75 & 0.55 <= u){
return(c(0,1,0,0))
} else if( u < 0.9 & 0.75 <= u){
return(c(0,0,1,0))
} else if( u<= 1 & 0.9<=u){
return(c(0,0,0,1))
}
}
prices <- c(0, 200, 600, 700)
a<- array(0,10^5)
prog <- ""
1000%%100
for(S in 1:length(a)){
i<-21
j<-41
u <- runif(100)
for(t in 1:100){
arr_typ <- which(arrival(u[t])==1)
k <- arr_typ - 1
if( arr_typ == 1){
next
} else if( (arr_typ == 4) & i > 1 & j > 1){
a[S] <- a[S] + P[i,j,t,k]*arrival(u[t])%*%prices
i <- i - P[i,j,t,k]
j <- j - P[i,j,t,k]
} else if( arr_typ == 2 & i > 1){
a[S] <- a[S] + P[i,j,t,k]*arrival(u[t])%*%prices
i <- i - P[i,j,t,k]
} else if( arr_typ==3 & j > 1){
a[S] <- a[S] + P[i,j,t,k]*arrival(u[t])%*%prices
j <- j - P[i,j,t,k]
}
}
if( S%%100 ==0){
prog <- paste(prog,".")
message(prog)
}
}
hist(a)
lapply(a, function(x) write.table( data.frame(x), 'opt.csv'  , append= T, sep=',' ))
a<- array(0,10^6)
prog <- ""
for(S in 1:length(a)){
i<-21
j<-41
u <- runif(100)
for(t in 1:100){
arr_typ <- which(arrival(u[t])==1)
k <- arr_typ - 1
if( arr_typ == 1){
next
} else if( (arr_typ == 4) & i > 1 & j > 1){
a[S] <- a[S] + P[i,j,t,k]*arrival(u[t])%*%prices
i <- i - P[i,j,t,k]
j <- j - P[i,j,t,k]
} else if( arr_typ == 2 & i > 1){
a[S] <- a[S] + P[i,j,t,k]*arrival(u[t])%*%prices
i <- i - P[i,j,t,k]
} else if( arr_typ==3 & j > 1){
a[S] <- a[S] + P[i,j,t,k]*arrival(u[t])%*%prices
j <- j - P[i,j,t,k]
}
}
if( S%%1000 ==0){
prog <- paste(prog,".")
message(prog)
}
}
lapply(a, function(x) write.table( data.frame(x), 'opt_1M.csv'  , append= T, sep=',' ))
write.csv(a,"./1M.csv")
hist(a)
shiny::runApp()
mean(a)
policy_n1 <- function(i, j, t, k){
decision <- c(1, 0)
if( i !=1 & j !=1){
v_sub <- v[c(i-1,i),c(j-1,j),t+1]
if( k == 1){
temp <- c(price[1]+v_sub[1,2], v_sub[2,2])
return(decision[which( temp == max(temp))])
} else if( k == 2){
temp <- c(price[2]+v_sub[2,1], v_sub[2,2])
return(decision[which( temp == max(temp))])
} else if( k == 3){
temp <- c(price[3]+v_sub[1,1], v_sub[2,2])
return(decision[which( temp == max(temp))])
} else{return(NULL)}
} else if( i ==1 & j == 1){
return(decision[2])
} else if (i == 1){
v_sub <- v[i, c(j-1,j),t+1]
if( k == 1){
return(decision[2])
} else if( k == 2){
temp <- c(price[1]+v_sub[1], v_sub[2])
return(decision[which( temp == max(temp))])
} else if( k == 3){
return(decision[2])
} else{ return(NULL)}
} else if (j == 1){
v_sub <- v[c(i-1,i), j,t+1]
if( k ==1){
temp <- c(price[2]+v_sub[1], v_sub[2])
return(decision[which( temp == max(temp))])
} else if( k==2){
return(decision[2])
} else if(k==3){
return(decision[2])
} else{ return(NULL)}
}
}
P <- array(0,c(21,41,100,3))
for(i in 1:21){
for(j in 1:41){
for(k in 1:3){
for(t in 1:100){
P[i,j,t,k] <- policy_n1(i,j,t,k)
}
}
}
}
C <- c(20,40)
# Arrival probabilities
lambda <- c(0.2, 0.15, 0.1)
# Fare prices
price <- c(200, 600, 700)
# resource consumption matrix
A <- matrix(c(1,0,0,1,1,1), nrow = 2, ncol = 3)
# Length of time horizon
T <- 100
v <- array(0, dim = c(C[1]+1, C[2]+1, T+1))
for ( t in T:1 ) {
# At every time period t, we need to compute the value function at every inventory level x for both legs
for ( x1Idx in 1:(C[1]+1))
for ( x2Idx in 1:(C[2]+1)) {
# Calculate the value function following the Bellman equation
v[x1Idx, x2Idx, t] <- lambda[1]*(max(price[1]+v[x1Idx-1, x2Idx, t+1],
v[x1Idx, x2Idx, t+1])) +
lambda[2]*(max(price[2]+v[x1Idx, x2Idx-1, t+1],
v[x1Idx, x2Idx, t+1]))+
lambda[3]*(max(price[3]+v[x1Idx-1, x2Idx-1, t+1],
v[x1Idx, x2Idx, t+1])) +
(1-sum(lambda))*(v[x1Idx, x2Idx, t+1])
}
}
policy_n1 <- function(i, j, t, k){
decision <- c(1, 0)
if( i !=1 & j !=1){
v_sub <- v[c(i-1,i),c(j-1,j),t+1]
if( k == 1){
temp <- c(price[1]+v_sub[1,2], v_sub[2,2])
return(decision[which( temp == max(temp))])
} else if( k == 2){
temp <- c(price[2]+v_sub[2,1], v_sub[2,2])
return(decision[which( temp == max(temp))])
} else if( k == 3){
temp <- c(price[3]+v_sub[1,1], v_sub[2,2])
return(decision[which( temp == max(temp))])
} else{return(NULL)}
} else if( i ==1 & j == 1){
return(decision[2])
} else if (i == 1){
v_sub <- v[i, c(j-1,j),t+1]
if( k == 1){
return(decision[2])
} else if( k == 2){
temp <- c(price[1]+v_sub[1], v_sub[2])
return(decision[which( temp == max(temp))])
} else if( k == 3){
return(decision[2])
} else{ return(NULL)}
} else if (j == 1){
v_sub <- v[c(i-1,i), j,t+1]
if( k ==1){
temp <- c(price[2]+v_sub[1], v_sub[2])
return(decision[which( temp == max(temp))])
} else if( k==2){
return(decision[2])
} else if(k==3){
return(decision[2])
} else{ return(NULL)}
}
}
P <- array(0,c(21,41,100,3))
for(i in 1:21){
for(j in 1:41){
for(k in 1:3){
for(t in 1:100){
P[i,j,t,k] <- policy_n1(i,j,t,k)
}
}
}
}
P <- saveRDS(P,"P.RData")
P <- readRDS("./www/P.RData")
arrival <- function(u){
if( u < 0.55 ){
return(c(1,0,0,0))
} else if( u < 0.75 & 0.55 <= u){
return(c(0,1,0,0))
} else if( u < 0.9 & 0.75 <= u){
return(c(0,0,1,0))
} else if( u<= 1 & 0.9<=u){
return(c(0,0,0,1))
}
}
prices <- c(0, 200, 600, 700)
a<- array(0,10^6)
prog <- ""
runApp()
a<- array(0,10^6)
prog <- ""
for(S in 1:length(a)){
i<-21
j<-41
u <- runif(100)
for(t in 1:100){
arr_typ <- which(arrival(u[t])==1)
k <- arr_typ - 1
if( arr_typ == 1){
next
} else if( (arr_typ == 4) & i > 1 & j > 1){
a[S] <- a[S] + P[i,j,t,k]*arrival(u[t])%*%prices
i <- i - P[i,j,t,k]
j <- j - P[i,j,t,k]
} else if( arr_typ == 2 & i > 1){
a[S] <- a[S] + P[i,j,t,k]*arrival(u[t])%*%prices
i <- i - P[i,j,t,k]
} else if( arr_typ==3 & j > 1){
a[S] <- a[S] + P[i,j,t,k]*arrival(u[t])%*%prices
j <- j - P[i,j,t,k]
}
}
if( S%%1000 ==0){
prog <- paste(prog,".")
message(prog)
}
}
write.csv(a,"./1M_corrected.csv")
mean(a)
sprintf("The optimal expected revenue at t=1 and full capacity is $%3.2f", v[C[1]+1, C[2]+1,1])
runApp()
